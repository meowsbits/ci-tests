name: Github Actions CI Env

on:
  schedule:
    - cron: '30 13 15 3 *'
  push:
    branches:
      - '*'
    paths:
      - '.github/workflows/github-actions-env.yaml'
  pull_request:
    branches:
      - '*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  GITHUB_ENV:
    name: Show Github Env vars
    runs-on: ubuntu-latest
    steps:
      - name: Print
        run: |
          echo -e "CI => $CI\n\tAlways set to true."
          echo -e "GITHUB_WORKFLOW => $GITHUB_WORKFLOW\n\tThe name of the workflow."
          echo -e "GITHUB_RUN_ID => $GITHUB_RUN_ID\n\tA unique number for each run within a repository. This number does not change if you re-run the workflow run."
          echo -e "GITHUB_RUN_NUMBER => $GITHUB_RUN_NUMBER\n\tA unique number for each run of a particular workflow in a repository. This number begins at 1 for the workflow's first run, and increments with each new run. This number does not change if you re-run the workflow run."
          echo -e "GITHUB_ACTION => $GITHUB_ACTION\n\tThe unique identifier (id) of the action."
          echo -e "GITHUB_ACTIONS => $GITHUB_ACTIONS\n\tAlways set to true when GitHub Actions is running the workflow. You can use this variable to differentiate when tests are being run locally or by GitHub Actions."
          echo -e "GITHUB_ACTOR => $GITHUB_ACTOR\n\tThe name of the person or app that initiated the workflow. For example, octocat."
          echo -e "GITHUB_REPOSITORY => $GITHUB_REPOSITORY\n\tThe owner and repository name. For example, octocat/Hello-World."
          echo -e "GITHUB_EVENT_NAME => $GITHUB_EVENT_NAME\n\tThe name of the webhook event that triggered the workflow."
          echo -e "GITHUB_EVENT_PATH => $GITHUB_EVENT_PATH\n\tThe path of the file with the complete webhook event payload. For example, /github/workflow/event.json."
          echo -e "GITHUB_WORKSPACE => $GITHUB_WORKSPACE\n\tThe GitHub workspace directory path. The workspace directory is a copy of your repository if your workflow uses the actions/checkout action. If you don't use the actions/checkout action, the directory will be empty. For example, /home/runner/work/my-repo-name/my-repo-name."
          echo -e "GITHUB_SHA => $GITHUB_SHA\n\tThe commit SHA that triggered the workflow. For example, ffac537e6cbbf934b08745a378932722df287a53."
          echo -e "GITHUB_REF => $GITHUB_REF\n\tThe branch or tag ref that triggered the workflow. For example, refs/heads/feature-branch-1. If neither a branch or tag is available for the event type, the variable will not exist."
          echo -e "GITHUB_HEAD_REF => $GITHUB_HEAD_REF\n\tOnly set for pull request events. The name of the head branch."
          echo -e "GITHUB_BASE_REF => $GITHUB_BASE_REF\n\tOnly set for pull request events. The name of the base branch."
          echo -e "GITHUB_SERVER_URL => $GITHUB_SERVER_URL\n\tReturns the URL of the GitHub server. For example: https://github.com."
          echo -e "GITHUB_API_URL => $GITHUB_API_URL\n\tReturns the API URL. For example: https://api.github.com."
          echo -e "GITHUB_GRAPHQL_URL => $GITHUB_GRAPHQL_URL\n\tReturns the GraphQL API URL. For example: https://api.github.com/graphql."
          if [[ $GITHUB_EVENT_NAME != pull_request ]]; then
                echo "is not pr"
          else
                echo "is pr"
          fi
